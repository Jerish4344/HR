# Generated by Django 5.2.3 on 2025-06-25 12:48

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('employees', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PayrollProcessing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('month', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('year', models.PositiveIntegerField()),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('processing', 'Processing'), ('completed', 'Completed'), ('approved', 'Approved'), ('paid', 'Paid'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('total_employees', models.PositiveIntegerField(default=0)),
                ('total_amount', models.DecimalField(decimal_places=2, default=0, max_digits=14, validators=[django.core.validators.MinValueValidator(0)])),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('payment_date', models.DateField(blank=True, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('is_locked', models.BooleanField(default=False, help_text='Whether this payroll is locked for editing')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_payrolls', to='employees.employee')),
                ('created_by', models.ForeignKey(help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('processed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_payrolls', to='employees.employee')),
                ('updated_by', models.ForeignKey(help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-year', '-month'],
            },
        ),
        migrations.CreateModel(
            name='Salary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('effective_from', models.DateField()),
                ('effective_to', models.DateField(blank=True, null=True)),
                ('gross_salary', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('net_salary', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('basic_salary', models.DecimalField(decimal_places=2, help_text='Basic salary component', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_current', models.BooleanField(default=True, help_text='Whether this is the current active salary')),
                ('salary_structure', models.JSONField(default=dict, help_text='Detailed breakdown of salary components')),
                ('payment_mode', models.CharField(default='bank_transfer', help_text='Mode of salary payment', max_length=50)),
                ('bank_account', models.CharField(blank=True, help_text='Bank account for salary transfer', max_length=100, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_salaries', to='employees.employee')),
                ('created_by', models.ForeignKey(help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='salaries', to='employees.employee')),
                ('updated_by', models.ForeignKey(help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-effective_from', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SalaryComponent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('component_type', models.CharField(choices=[('earning', 'Earning'), ('deduction', 'Deduction'), ('reimbursement', 'Reimbursement'), ('bonus', 'Bonus'), ('tax', 'Tax')], default='earning', max_length=20)),
                ('is_taxable', models.BooleanField(default=True, help_text='Whether this component is taxable')),
                ('is_fixed', models.BooleanField(default=True, help_text='Whether this is a fixed component or calculated')),
                ('calculation_formula', models.TextField(blank=True, help_text='Formula to calculate this component (if not fixed)', null=True)),
                ('is_percentage', models.BooleanField(default=False, help_text='Whether this component is calculated as a percentage of another component')),
                ('percentage_value', models.DecimalField(decimal_places=2, default=0, help_text='Percentage value if this is a percentage-based component', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_active', models.BooleanField(default=True)),
                ('display_order', models.PositiveIntegerField(default=0, help_text='Order in which to display this component on salary slips')),
                ('created_by', models.ForeignKey(help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL)),
                ('percentage_of', models.ForeignKey(blank=True, help_text='Component this is a percentage of', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='percentage_components', to='payroll.salarycomponent')),
                ('updated_by', models.ForeignKey(help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['component_type', 'display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SalarySlip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('slip_number', models.CharField(blank=True, help_text='Unique salary slip number', max_length=50, null=True, unique=True)),
                ('gross_amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('net_amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('paid', 'Paid'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('payment_date', models.DateField(blank=True, null=True)),
                ('payment_reference', models.CharField(blank=True, help_text='Reference number for the payment transaction', max_length=100, null=True)),
                ('salary_components', models.JSONField(default=dict, help_text='Detailed breakdown of salary components')),
                ('attendance_summary', models.JSONField(default=dict, help_text='Summary of attendance for the pay period')),
                ('remarks', models.TextField(blank=True, null=True)),
                ('is_email_sent', models.BooleanField(default=False)),
                ('email_sent_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='salary_slips', to='employees.employee')),
                ('payroll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='salary_slips', to='payroll.payrollprocessing')),
                ('salary', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='salary_slips', to='payroll.salary')),
                ('updated_by', models.ForeignKey(help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-payroll__year', '-payroll__month', 'employee__employee_id'],
            },
        ),
        migrations.CreateModel(
            name='TaxDeduction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('financial_year', models.CharField(help_text='Financial year for tax calculation (e.g., 2023-2024)', max_length=9)),
                ('tax_regime', models.CharField(choices=[('old', 'Old Regime'), ('new', 'New Regime')], default='old', help_text='Tax regime chosen by the employee', max_length=20)),
                ('gross_income', models.DecimalField(decimal_places=2, help_text='Total gross income for the year', max_digits=14, validators=[django.core.validators.MinValueValidator(0)])),
                ('taxable_income', models.DecimalField(decimal_places=2, help_text='Total taxable income after exemptions', max_digits=14, validators=[django.core.validators.MinValueValidator(0)])),
                ('tax_deductions', models.JSONField(default=dict, help_text='Breakdown of tax deductions under different sections')),
                ('total_tax', models.DecimalField(decimal_places=2, help_text='Total tax calculated for the year', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('tax_paid_to_date', models.DecimalField(decimal_places=2, default=0, help_text='Tax already paid/deducted till date', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('remaining_tax', models.DecimalField(decimal_places=2, default=0, help_text='Remaining tax to be paid', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('monthly_deduction', models.DecimalField(decimal_places=2, default=0, help_text='Monthly tax deduction amount', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_finalized', models.BooleanField(default=False, help_text='Whether tax calculation is finalized for the year')),
                ('remarks', models.TextField(blank=True, null=True)),
                ('created_by', models.ForeignKey(help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tax_deductions', to='employees.employee')),
                ('updated_by', models.ForeignKey(help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-financial_year', 'employee__employee_id'],
            },
        ),
        migrations.AddIndex(
            model_name='payrollprocessing',
            index=models.Index(fields=['month', 'year'], name='payroll_pay_month_c4f658_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollprocessing',
            index=models.Index(fields=['status'], name='payroll_pay_status_e64073_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='payrollprocessing',
            unique_together={('month', 'year')},
        ),
        migrations.AddIndex(
            model_name='salary',
            index=models.Index(fields=['employee', 'effective_from'], name='payroll_sal_employe_3d7c71_idx'),
        ),
        migrations.AddIndex(
            model_name='salary',
            index=models.Index(fields=['is_current'], name='payroll_sal_is_curr_49750f_idx'),
        ),
        migrations.AddIndex(
            model_name='salaryslip',
            index=models.Index(fields=['employee', 'payment_status'], name='payroll_sal_employe_f7e6e4_idx'),
        ),
        migrations.AddIndex(
            model_name='salaryslip',
            index=models.Index(fields=['payroll', 'payment_status'], name='payroll_sal_payroll_16a626_idx'),
        ),
        migrations.AddIndex(
            model_name='taxdeduction',
            index=models.Index(fields=['employee', 'financial_year'], name='payroll_tax_employe_c91617_idx'),
        ),
        migrations.AddIndex(
            model_name='taxdeduction',
            index=models.Index(fields=['financial_year'], name='payroll_tax_financi_187411_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='taxdeduction',
            unique_together={('employee', 'financial_year')},
        ),
    ]

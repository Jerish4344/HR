# Generated by Django 5.2.3 on 2025-06-25 12:48

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        ('employees', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DeviceInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('device_id', models.CharField(help_text='Unique identifier for the device', max_length=255)),
                ('device_type', models.CharField(choices=[('android', 'Android'), ('ios', 'iOS'), ('web', 'Web Browser'), ('other', 'Other')], default='other', max_length=20)),
                ('device_model', models.CharField(blank=True, help_text='Model of the device', max_length=100, null=True)),
                ('os_version', models.CharField(blank=True, help_text='Operating system version', max_length=50, null=True)),
                ('app_version', models.CharField(blank=True, help_text='Tracking app version', max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this device is actively used for tracking')),
                ('last_seen', models.DateTimeField(blank=True, help_text='When the device was last seen', null=True)),
                ('fcm_token', models.TextField(blank=True, help_text='Firebase Cloud Messaging token for push notifications', null=True)),
                ('device_settings', models.JSONField(blank=True, default=dict, help_text='Device-specific settings')),
                ('created_by', models.ForeignKey(help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devices', to='employees.employee')),
                ('updated_by', models.ForeignKey(help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-last_seen'],
            },
        ),
        migrations.CreateModel(
            name='GeofenceArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('geofence_type', models.CharField(choices=[('circle', 'Circle'), ('polygon', 'Polygon'), ('rectangle', 'Rectangle')], default='circle', max_length=20)),
                ('center_latitude', models.DecimalField(blank=True, decimal_places=7, help_text='Center latitude for circle geofence', max_digits=10, null=True)),
                ('center_longitude', models.DecimalField(blank=True, decimal_places=7, help_text='Center longitude for circle geofence', max_digits=10, null=True)),
                ('radius', models.PositiveIntegerField(blank=True, help_text='Radius in meters for circle geofence', null=True)),
                ('coordinates', models.JSONField(blank=True, default=list, help_text='Coordinates for polygon or rectangle geofence')),
                ('is_active', models.BooleanField(default=True)),
                ('color', models.CharField(default='#3388ff', help_text='Color for displaying the geofence on map', max_length=20)),
                ('created_by', models.ForeignKey(help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL)),
                ('store', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='geofences', to='core.store')),
                ('updated_by', models.ForeignKey(help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EmployeeTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether location tracking is active for this employee')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('paused', 'Paused'), ('error', 'Error')], default='active', max_length=20)),
                ('last_latitude', models.DecimalField(blank=True, decimal_places=7, help_text='Last recorded latitude', max_digits=10, null=True)),
                ('last_longitude', models.DecimalField(blank=True, decimal_places=7, help_text='Last recorded longitude', max_digits=10, null=True)),
                ('last_update', models.DateTimeField(blank=True, help_text='Timestamp of last location update', null=True)),
                ('last_accuracy', models.FloatField(blank=True, help_text='Accuracy of last location in meters', null=True)),
                ('last_battery_level', models.FloatField(blank=True, help_text='Battery level at last update (percentage)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('tracking_enabled_since', models.DateTimeField(blank=True, help_text='When tracking was last enabled', null=True)),
                ('created_by', models.ForeignKey(help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('current_store', models.ForeignKey(blank=True, help_text='Store where employee is currently located', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='currently_tracked_employees', to='core.store')),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tracking_sessions', to='tracking.deviceinfo')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracking', to='employees.employee')),
                ('updated_by', models.ForeignKey(help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('current_geofence', models.ForeignKey(blank=True, help_text='Geofence where employee is currently located', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='currently_tracked_employees', to='tracking.geofencearea')),
            ],
            options={
                'ordering': ['-last_update'],
            },
        ),
        migrations.CreateModel(
            name='TrackingLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('event_type', models.CharField(choices=[('check_in', 'Check In'), ('check_out', 'Check Out'), ('location_update', 'Location Update'), ('geofence_enter', 'Geofence Enter'), ('geofence_exit', 'Geofence Exit'), ('geofence_dwell', 'Geofence Dwell')], default='location_update', max_length=20)),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('accuracy', models.FloatField(blank=True, help_text='Accuracy of location in meters', null=True)),
                ('battery_level', models.FloatField(blank=True, help_text='Battery level in percentage', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('additional_data', models.JSONField(blank=True, default=dict, help_text='Additional tracking data')),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tracking_logs', to='tracking.deviceinfo')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracking_logs', to='employees.employee')),
                ('geofence', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tracking_logs', to='tracking.geofencearea')),
                ('store', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tracking_logs', to='core.store')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='deviceinfo',
            index=models.Index(fields=['device_id'], name='tracking_de_device__61b3f7_idx'),
        ),
        migrations.AddIndex(
            model_name='deviceinfo',
            index=models.Index(fields=['employee', 'is_active'], name='tracking_de_employe_c13236_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='deviceinfo',
            unique_together={('employee', 'device_id')},
        ),
        migrations.AddIndex(
            model_name='employeetracking',
            index=models.Index(fields=['employee', 'is_active'], name='tracking_em_employe_2195ba_idx'),
        ),
        migrations.AddIndex(
            model_name='employeetracking',
            index=models.Index(fields=['last_update'], name='tracking_em_last_up_53aaef_idx'),
        ),
        migrations.AddIndex(
            model_name='trackinglog',
            index=models.Index(fields=['employee', 'timestamp'], name='tracking_tr_employe_47707d_idx'),
        ),
        migrations.AddIndex(
            model_name='trackinglog',
            index=models.Index(fields=['event_type', 'timestamp'], name='tracking_tr_event_t_d9c1f8_idx'),
        ),
        migrations.AddIndex(
            model_name='trackinglog',
            index=models.Index(fields=['geofence', 'timestamp'], name='tracking_tr_geofenc_9ec2a2_idx'),
        ),
    ]
